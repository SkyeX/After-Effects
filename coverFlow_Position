//expression by Skye X [http://skye-x.com]

var y = value[1]; //set y position

var autoOff = thisComp.layer("__coverFlowControl__").effect("Auto Offset")("Checkbox"); //set distance offset between cards either manually or automatically (to the width of the card)

var absL = Math.abs(thisComp.layer("__coverFlowControl__").effect("Rotation Left Side")("Slider"));

var absR = Math.abs(thisComp.layer("__coverFlowControl__").effect("Rotation Right Side")("Slider"));

var rot = Math.max(absL, absR);
if (rot > 90) {rot = 90};

var minOff = thisComp.layer("__coverFlowControl__").effect("Minimum Offset")("Slider");

var offDist = thisComp.layer("__coverFlowControl__").effect("Offset Distance")("Slider");

if (autoOff == 1) {
	var offset = linear(rot, 0, 90, thisLayer.width, minOff);
} else {
	var offset = offDist;
}

var x = thisComp.layer("__coverFlowControl__").effect("Position")("Slider") + (offset * (index - 2)); //set x position

var center = thisComp.layer("__coverFlowControl__").transform.position[0]; //defines x position at which to reach midpoint of transition (currently set to x-pos of control null)

var distance = x - center;

var easePos = thisComp.layer("__coverFlowControl__").effect("Ease Position")("Checkbox"); //option to ease position animation

var autoZ = thisComp.layer("__coverFlowControl__").effect("Auto Z Distance")("Checkbox"); //set distance threshold from center to begin moving in z either manually or automatically (to the width of the Offset distance)

if (autoZ == 1) {
	var zDist = offset;
} else {
	var zDist = thisComp.layer("__coverFlowControl__").effect("Begin Z Depth Distance")("Slider");
}

var zDepth = thisComp.layer("__coverFlowControl__").effect("Z Depth")("Slider"); //set depth to move in z

if (x <= center) {
	if (easePos == 1) {
		var z = ease(center + distance, center - zDist, center, value[2], value[2] - zDepth);
	} else {
		var z = linear(center + distance, center - zDist, center, value[2], value[2] - zDepth);
	}
} else {
	if (easePos == 1) {
		var z = ease(center + distance, center, center + zDist, value[2] - zDepth, value[2]);
	} else {
		var z = linear(center + distance, center, center + zDist, value[2] - zDepth, value[2]);
	}
}

[x, y, z]
