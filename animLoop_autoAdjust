minVal = effect("Minimum Value")("Slider"); // minimum value of loop
maxVal = effect("Maximum Value")("Slider"); // maximum value of loop
fps = 1.0 / thisComp.frameDuration; // retains functionality at different framerates
freq = effect("Loop Frequency")("Slider") / fps; // loop frequency
holdDur = effect("Hold Duration")("Slider") / fps; // duration of hold
fadeDur = ( freq - holdDur ); // duration of fade
compDur = thisComp.duration * fps; // duration of comp in frames
startTime = inPoint; // where to start animation â€“ defaults to in point of layer

// test to see if frequency setting will loop seamlessly, otherwise adjusts it
if ( compDur % ( freq * fps ) != 0) {
    i = 0;
    j = 0;
    iTest = freq;
    jTest = freq;

// checks distance upwards to a looping frequency
    while ( compDur % ( iTest * fps ) != 0 ) {
        iTest += 1 / fps;
        i++;
        if ( i > ( iTest * fps ) ) {
            break;
        }
    }

// checks distance downwards to a looping frequency
    while ( compDur % ( jTest * fps ) != 0 ) {
        jTest -= 1 / fps;
        j++;
        if ( j > ( jTest * fps ) ) {
            break;
        }
    }

// uses the shorter distance to adjust to looping frequency
    if ( i <= j ) {
        while ( compDur % ( freq * fps ) != 0 ) {
            freq += 1 / fps;
        }
    } else {
        while ( compDur % ( freq * fps ) != 0 ) {
            freq -= 1 / fps;
        }
    }

// main function, creates animation in/out, flipping n on each cycle to switch between them
    if ( time < startTime ) {
        maxVal;
    } else {
        n = 0;
        animStart = startTime;
        animDur = freq;
        do {
            timeTest = ( animStart + animDur ) < time;
                if ( timeTest == true ) {
                    animStart += animDur;
                    n ^= 1;
                }
            } while ( timeTest == true );
    linear ( time - animStart + holdDur, animDur - fadeDur, animDur, n == 0 ? maxVal : minVal, n == 0 ? minVal : maxVal );
    }

} else {

// runs main function without adjusting frequency
    if ( time < startTime ) {
        maxVal;
    } else {
        n = 0;
        animStart = startTime;
        animDur = freq;
        do {
            timeTest = ( animStart + animDur ) < time;
                if ( timeTest == true ) {
                    animStart += animDur;
                    n ^= 1;
                }
            } while ( timeTest == true );
    linear ( time - animStart + holdDur, animDur - fadeDur, animDur, n == 0 ? maxVal : minVal, n == 0 ? minVal : maxVal );
    }
}
